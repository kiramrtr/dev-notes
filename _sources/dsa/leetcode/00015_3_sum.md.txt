# [15. 3Sum](https://leetcode.com/problems/3sum/)

Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.

> Notice that the solution set must not contain duplicate triplets.

**Example 1:**

```
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Explanation:
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.

The distinct triplets are [-1,0,1] and [-1,-1,2].
```

```{code-block} java
:linenos:
:dedent: 2

  public List<List<Integer>> threeSum(int[] nums) {
    List<List<Integer>> result = new ArrayList<>();
    Arrays.sort(nums);

    for (int i = 0; i < nums.length - 2; i++) {
      // if nums[i] and nums[i-1] are same continue
      if (i > 0 && nums[i] == nums[i - 1]) {
        continue;
      }

      int l = i + 1;
      int r = nums.length - 1;

      while (l < r) {
        int sum = nums[i] + nums[l] + nums[r];

        if (sum < 0) {
          // need to increase
          l++;
        } else if (sum > 0) {
          // need to decrease
          r--;
        } else {
          List<Integer> triplet = Arrays.asList(nums[i], nums[l++], nums[r--]);
          result.add(triplet);

          // if next left value is same as current right ignore
          while (l < r && nums[l] == nums[l - 1]) {
            l++;
          }

          // if next right value is same as current right ignore
          while (l < r && nums[r] == nums[r + 1]) {
            r--;
          }
        }
      }
    }
    return result;
  }
```
